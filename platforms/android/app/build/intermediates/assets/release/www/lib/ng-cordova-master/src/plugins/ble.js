angular.module("ngCordova.plugins.ble",[]).factory("$cordovaBLE",["$q","$timeout","$log",function($q,$timeout,$log){return{scan:function(services,seconds){var q=$q.defer();return ble.startScan(services,function(result){q.notify(result)},function(error){q.reject(error)}),$timeout(function(){ble.stopScan(function(){q.resolve()},function(error){q.reject(error)})},1e3*seconds),q.promise},startScan:function(services,callback,errorCallback){return ble.startScan(services,callback,errorCallback)},stopScan:function(){var q=$q.defer();return ble.stopScan(function(){q.resolve()},function(error){q.reject(error)}),q.promise},connect:function(deviceID){var q=$q.defer();return ble.connect(deviceID,function(result){q.resolve(result)},function(error){q.reject(error)}),q.promise},disconnect:function(deviceID){var q=$q.defer();return ble.disconnect(deviceID,function(result){q.resolve(result)},function(error){q.reject(error)}),q.promise},read:function(deviceID,serviceUUID,characteristicUUID){var q=$q.defer();return ble.read(deviceID,serviceUUID,characteristicUUID,function(result){q.resolve(result)},function(error){q.reject(error)}),q.promise},write:function(deviceID,serviceUUID,characteristicUUID,data){var q=$q.defer();return ble.write(deviceID,serviceUUID,characteristicUUID,data,function(result){q.resolve(result)},function(error){q.reject(error)}),q.promise},writeWithoutResponse:function(deviceID,serviceUUID,characteristicUUID,data){var q=$q.defer();return ble.writeWithoutResponse(deviceID,serviceUUID,characteristicUUID,data,function(result){q.resolve(result)},function(error){q.reject(error)}),q.promise},writeCommand:function(deviceID,serviceUUID,characteristicUUID,data){return $log.warning("writeCommand is deprecated, use writeWithoutResponse"),this.writeWithoutResponse(deviceID,serviceUUID,characteristicUUID,data)},startNotification:function(deviceID,serviceUUID,characteristicUUID,callback,errorCallback){return ble.startNotification(deviceID,serviceUUID,characteristicUUID,callback,errorCallback)},stopNotification:function(deviceID,serviceUUID,characteristicUUID){var q=$q.defer();return ble.stopNotification(deviceID,serviceUUID,characteristicUUID,function(result){q.resolve(result)},function(error){q.reject(error)}),q.promise},isConnected:function(deviceID){var q=$q.defer();return ble.isConnected(deviceID,function(result){q.resolve(result)},function(error){q.reject(error)}),q.promise},enable:function(){var q=$q.defer();return ble.enable(function(result){q.resolve(result)},function(error){q.reject(error)}),q.promise},isEnabled:function(){var q=$q.defer();return ble.isEnabled(function(result){q.resolve(result)},function(error){q.reject(error)}),q.promise}}}]);