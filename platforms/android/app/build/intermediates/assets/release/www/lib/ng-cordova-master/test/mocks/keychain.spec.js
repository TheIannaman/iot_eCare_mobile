describe("ngCordovaMocks",function(){beforeEach(function(){module("ngCordovaMocks")}),describe("keychain",function(){var $rootScope=null,$cordovaKeychain=null;beforeEach(inject(function(_$rootScope_,_$cordovaKeychain_){$rootScope=_$rootScope_,$cordovaKeychain=_$cordovaKeychain_})),it("should get values that are stored",function(){$cordovaKeychain.keychains={testService:{testKey:"testValue"}},$cordovaKeychain.getForKey("testKey","testService").then(function(value){expect(value).toEqual("testValue")},function(){expect(!1).toBe(!0)}),$rootScope.$apply()}),it("should not get values that are not stored",function(){$cordovaKeychain.getForKey("testKey","testService").then(function(){expect(!1).toBe(!0)},function(){expect(!0).toBe(!0)}),$rootScope.$apply()}),it("should store values",function(){$cordovaKeychain.setForKey("testKey","testService","testValue").then(function(){expect(!0).toBe(!0)},function(){expect(!1).toBe(!0)}).finally(function(){expect($cordovaKeychain.keychains.testService).toEqual({testKey:"testValue"})}),$rootScope.$apply()}),it("should remove values",function(){$cordovaKeychain.keychains={testService:{testKey:"testValue"}},$cordovaKeychain.removeForKey("testKey","testService").then(function(){expect(!0).toBe(!0)},function(){expect(!1).toBe(!0)}).finally(function(){expect($cordovaKeychain.keychains.testService.testKey).toBeUndefined()}),$rootScope.$apply()})})});