ngCordovaMocks.factory("$cordovaBLE",["$q","$timeout","$interval","$log",function($q,$timeout,$interval,$log){var deviceScan={name:"Test Device",id:"AA:BB:CC:DD:EE:FF",advertising:[2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],rssi:-55},deviceConnect={name:"Test Device",id:"AA:BB:CC:DD:EE:FF",advertising:[2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],rssi:-55,services:["1800","1801","180f"],characteristics:[{service:"1800",characteristic:"2a00",properties:["Read"]},{service:"1800",characteristic:"2a01",properties:["Read"]},{service:"1801",characteristic:"2a05",properties:["Read"]},{service:"180f",characteristic:"2a19",properties:["Read"],descriptors:[{uuid:"2901"},{uuid:"2904"}]}]},readData=new ArrayBuffer(8);return{scan:function(services,seconds){var q=$q.defer();return $timeout(function(){q.notify(deviceScan)},Math.round(1e3*seconds*Math.random())),$timeout(function(){q.resolve()},1e3*seconds),q.promise},startScan:function(services,callback,errorCallback){$timeout(function(){callback(deviceScan)},Math.round(1e3*Math.random()))},stopScan:function(){var q=$q.defer();return $timeout(function(){q.resolve()},500),q.promise},connect:function(deviceID){var q=$q.defer();return $timeout(function(){q.resolve(deviceConnect)},1500),q.promise},disconnect:function(deviceID){var q=$q.defer();return $timeout(function(){q.resolve(!0)},500),q.promise},read:function(deviceID,serviceUUID,characteristicUUID){var q=$q.defer();return $timeout(function(){q.resolve(readData)},100),q.promise},write:function(deviceID,serviceUUID,characteristicUUID,data){var q=$q.defer();return $timeout(function(){q.resolve(!0)},100),q.promise},writeWithoutResponse:function(deviceID,serviceUUID,characteristicUUID,data){var q=$q.defer();return $timeout(function(){q.resolve(!0)},100),q.promise},writeCommand:function(deviceID,serviceUUID,characteristicUUID,data){return $log.warning("writeCommand is deprecated, use writeWithoutResponse"),this.writeWithoutResponse(deviceID,serviceUUID,characteristicUUID,data)},startNotification:function(deviceID,serviceUUID,characteristicUUID,callback,errorCallback){$interval(function(){var data=new Uint8Array([Math.round(255*Math.random())]);callback(data)},200,10)},stopNotification:function(deviceID,serviceUUID,characteristicUUID){var q=$q.defer();return $timeout(function(){q.resolve()},100),q.promise},isConnected:function(deviceID){var q=$q.defer();return q.resolve(!0),q.promise},enable:function(){var q=$q.defer();return $timeout(function(){q.resolve()},1500),q.promise},isEnabled:function(){var q=$q.defer();return q.resolve(!0),q.promise}}}]);