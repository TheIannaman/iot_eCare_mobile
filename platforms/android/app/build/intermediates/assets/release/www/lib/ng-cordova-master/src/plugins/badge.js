angular.module("ngCordova.plugins.badge",[]).factory("$cordovaBadge",["$q",function($q){return{hasPermission:function(){var q=$q.defer();return cordova.plugins.notification.badge.hasPermission(function(permission){permission?q.resolve(!0):q.reject("You do not have permission")}),q.promise},promptForPermission:function(){return cordova.plugins.notification.badge.promptForPermission()},set:function(badge,callback,scope){var q=$q.defer();return cordova.plugins.notification.badge.hasPermission(function(permission){permission?q.resolve(cordova.plugins.notification.badge.set(badge,callback,scope)):q.reject("You do not have permission to set Badge")}),q.promise},get:function(){var q=$q.defer();return cordova.plugins.notification.badge.hasPermission(function(permission){permission?cordova.plugins.notification.badge.get(function(badge){q.resolve(badge)}):q.reject("You do not have permission to get Badge")}),q.promise},clear:function(callback,scope){var q=$q.defer();return cordova.plugins.notification.badge.hasPermission(function(permission){permission?q.resolve(cordova.plugins.notification.badge.clear(callback,scope)):q.reject("You do not have permission to clear Badge")}),q.promise},increase:function(count,callback,scope){var q=$q.defer();return this.hasPermission().then(function(){q.resolve(cordova.plugins.notification.badge.increase(count,callback,scope))},function(){q.reject("You do not have permission to increase Badge")}),q.promise},decrease:function(count,callback,scope){var q=$q.defer();return this.hasPermission().then(function(){q.resolve(cordova.plugins.notification.badge.decrease(count,callback,scope))},function(){q.reject("You do not have permission to decrease Badge")}),q.promise},configure:function(config){return cordova.plugins.notification.badge.configure(config)}}}]);