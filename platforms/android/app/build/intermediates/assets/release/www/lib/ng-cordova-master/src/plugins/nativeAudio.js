angular.module("ngCordova.plugins.nativeAudio",[]).factory("$cordovaNativeAudio",["$q","$window",function($q,$window){return{preloadSimple:function(id,assetPath){var q=$q.defer();return $window.plugins.NativeAudio.preloadSimple(id,assetPath,function(result){q.resolve(result)},function(err){q.reject(err)}),q.promise},preloadComplex:function(id,assetPath,volume,voices,delay){var q=$q.defer();return $window.plugins.NativeAudio.preloadComplex(id,assetPath,volume,voices,delay,function(result){q.resolve(result)},function(err){q.reject(err)}),q.promise},play:function(id,completeCallback){var q=$q.defer();return $window.plugins.NativeAudio.play(id,function(result){q.resolve(result)},function(err){q.reject(err)},completeCallback),q.promise},stop:function(id){var q=$q.defer();return $window.plugins.NativeAudio.stop(id,function(result){q.resolve(result)},function(err){q.reject(err)}),q.promise},loop:function(id){var q=$q.defer();return $window.plugins.NativeAudio.loop(id,function(result){q.resolve(result)},function(err){q.reject(err)}),q.promise},unload:function(id){var q=$q.defer();return $window.plugins.NativeAudio.unload(id,function(result){q.resolve(result)},function(err){q.reject(err)}),q.promise},setVolumeForComplexAsset:function(id,volume){var q=$q.defer();return $window.plugins.NativeAudio.setVolumeForComplexAsset(id,volume,function(result){q.resolve(result)},function(err){q.reject(err)}),q.promise}}}]);