angular.module("ngCordova.plugins.bluetoothSerial",[]).factory("$cordovaBluetoothSerial",["$q","$window",function($q,$window){return{connect:function(address){var q=$q.defer(),disconnectionPromise=$q.defer(),isConnected=!1;return $window.bluetoothSerial.connect(address,function(){isConnected=!0,q.resolve(disconnectionPromise)},function(error){!1===isConnected&&disconnectionPromise.reject(error),q.reject(error)}),q.promise},connectInsecure:function(address){var q=$q.defer();return $window.bluetoothSerial.connectInsecure(address,function(){q.resolve()},function(error){q.reject(error)}),q.promise},disconnect:function(){var q=$q.defer();return $window.bluetoothSerial.disconnect(function(){q.resolve()},function(error){q.reject(error)}),q.promise},list:function(){var q=$q.defer();return $window.bluetoothSerial.list(function(data){q.resolve(data)},function(error){q.reject(error)}),q.promise},discoverUnpaired:function(){var q=$q.defer();return $window.bluetoothSerial.discoverUnpaired(function(data){q.resolve(data)},function(error){q.reject(error)}),q.promise},setDeviceDiscoveredListener:function(){var q=$q.defer();return $window.bluetoothSerial.setDeviceDiscoveredListener(function(data){q.notify(data)}),q.promise},clearDeviceDiscoveredListener:function(){$window.bluetoothSerial.clearDeviceDiscoveredListener()},showBluetoothSettings:function(){var q=$q.defer();return $window.bluetoothSerial.showBluetoothSettings(function(){q.resolve()},function(error){q.reject(error)}),q.promise},isEnabled:function(){var q=$q.defer();return $window.bluetoothSerial.isEnabled(function(){q.resolve()},function(){q.reject()}),q.promise},enable:function(){var q=$q.defer();return $window.bluetoothSerial.enable(function(){q.resolve()},function(){q.reject()}),q.promise},isConnected:function(){var q=$q.defer();return $window.bluetoothSerial.isConnected(function(){q.resolve()},function(){q.reject()}),q.promise},available:function(){var q=$q.defer();return $window.bluetoothSerial.available(function(data){q.resolve(data)},function(error){q.reject(error)}),q.promise},read:function(){var q=$q.defer();return $window.bluetoothSerial.read(function(data){q.resolve(data)},function(error){q.reject(error)}),q.promise},readUntil:function(delimiter){var q=$q.defer();return $window.bluetoothSerial.readUntil(delimiter,function(data){q.resolve(data)},function(error){q.reject(error)}),q.promise},write:function(data){var q=$q.defer();return $window.bluetoothSerial.write(data,function(){q.resolve()},function(error){q.reject(error)}),q.promise},subscribe:function(delimiter){var q=$q.defer();return $window.bluetoothSerial.subscribe(delimiter,function(data){q.notify(data)},function(error){q.reject(error)}),q.promise},subscribeRawData:function(){var q=$q.defer();return $window.bluetoothSerial.subscribeRawData(function(data){q.notify(data)},function(error){q.reject(error)}),q.promise},unsubscribe:function(){var q=$q.defer();return $window.bluetoothSerial.unsubscribe(function(){q.resolve()},function(error){q.reject(error)}),q.promise},unsubscribeRawData:function(){var q=$q.defer();return $window.bluetoothSerial.unsubscribeRawData(function(){q.resolve()},function(error){q.reject(error)}),q.promise},clear:function(){var q=$q.defer();return $window.bluetoothSerial.clear(function(){q.resolve()},function(error){q.reject(error)}),q.promise},readRSSI:function(){var q=$q.defer();return $window.bluetoothSerial.readRSSI(function(data){q.resolve(data)},function(error){q.reject(error)}),q.promise}}}]);