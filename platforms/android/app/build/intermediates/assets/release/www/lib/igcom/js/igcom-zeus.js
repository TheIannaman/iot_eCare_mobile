var zeusApp=angular.module("igcom-zeus",[]);zeusApp.config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push("zeusAuthInterceptorService")}]),zeusApp.factory("zeusAuthService",["$log","$window","$q","$http","$rootScope",function($log,$window,$q,$http,$rootScope){var clientId="",tokenEndPoint="",createUserInfoModel=function(expires,issued,accessToken,clientId,expiresIn,refreshToken,tokenType,username,sign){return{expires:expires,issued:issued,accessToken:accessToken,clientId:clientId,expiresIn:expiresIn,refreshToken:refreshToken,tokenType:tokenType,username:username,sign:sign}},deleteAuthUserInfo=function(){$window.localStorage.removeItem("AuthUserInfo")},getClientId=function(){return clientId},setUserInfo=function(val){$window.localStorage.AuthUserInfo=angular.toJson(val)},getUserInfo=function(){return angular.fromJson($window.localStorage.AuthUserInfo)},zeusLabels={error:"Errore",warning:"Attenzione",credentialsInvalid:"Verifica che i dati di autenticazione siano corretti.",firstAccessDetected:"In seguito al primo accesso Ã¨ necessario cambiare la password temporanea con una definitiva.",loginAttemptsExceeded:"Troppi accessi errati. Contattare l'assistenza per eseguire lo sblocco dell'account.",passwordExpired:"Password scaduta, si prega di impostarla nuovamente.",passwordInvalid:"Password non riconosciuta.",userIsBanned:"Utente bannato dal sistema. Contattare l'assistenza per eseguire lo sblocco dell'account.",userIsDisable:"Utente disabilitato dal sistema. Contattare l'assistenza per eseguire lo sblocco dell'account.",usernameInvalid:"Username non riconosciuto.",insufficientPermission:"Non possiedi i permessi necessari per poter effettuare questa operazione."},claimsTrack=function(){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){var requireClaim=null;void 0!==toState.data&&null!==toState.data&&(requireClaim=toState.data.requireClaim),requireClaim&&$rootScope.isAuth&&(hasClaim(requireClaim)||(event.preventDefault(),$rootScope.$broadcast("zeus-claims-missing",{errorMessage:zeusLabels.insufficientPermission}),$rootScope.claims&&0===$rootScope.claims.length&&$rootScope.$broadcast("zeus-logout")))})},loginTrack=function(){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){var requireLogin=!1;void 0!==toState.data&&null!==toState.data&&(requireLogin=toState.data.requireLogin),requireLogin&&!0===requireLogin&&(!1!==$rootScope&&"false"!==$rootScope.isAuth&&!1!==$rootScope.isAuth&&void 0!==$rootScope.isAuth||(event.preventDefault(),$rootScope.$broadcast("zeus-login-required")))})},hasClaim=function(claimsParam){if(!$rootScope.claims)return!1;if(!claimsParam)return!1;var result=!1;return angular.forEach(claimsParam,function(claimParam){var claimType=claimParam.claimType||claimParam.type||claimParam.claimEntity||"",claimValues=claimParam.claimValues||claimParam.values||claimParam.claimNames;result=function(claimType,claimValues){var result=!1;return angular.forEach(claimValues,function(claimName){angular.forEach($rootScope.claims,function(claimProfile){claimProfile.claimType===claimType&&claimProfile.claimValue===claimName&&(result=!0)})}),result}(claimType,claimValues)}),result};return{logout:function(){var deferred=$q.defer();return deleteAuthUserInfo(),deferred.resolve(),$rootScope.$broadcast("zeus-logout"),deferred.promise},login:function(username,password,tokenEndPointParam){var requestUri="grant_type=password&username="+username+"&password="+password+"&client_id="+getClientId(),request={method:"POST",url:tokenEndPointParam||tokenEndPoint,headers:{"Content-Type":"application/x-www-form-urlencoded"},data:requestUri},deferred=$q.defer();return $http(request).then(function(response){response=response.data;var userInfoModel=createUserInfoModel(response[".expires"],response[".issued"],response.access_token,response["as:client_id"],response.token_type,response.refresh_token,response.token_type,response.userName,response.sign);setUserInfo(userInfoModel),deferred.resolve(userInfoModel),$rootScope.$broadcast("zeus-login-success",response),$log.info("Zeus - Login eseguito - Response: ",response)},function(error){deferred.reject(error),$rootScope.$broadcast("zeus-login-error",error),$log.error("Zeus - Login fallito - Errori: ",error)}),deferred.promise},registration:function(url,request){return $q.defer().promise},getClientId:getClientId,setClientId:function(value){clientId=value},getUserInfo:getUserInfo,setUserInfo:setUserInfo,USER_INFO_LOCAL_STORAGE_KEY:"AuthUserInfo",refreshToken:function(tokenEndPointParam){var requestUri="grant_type=refresh_token&refresh_token="+getUserInfo().refreshToken+"&client_id="+getClientId(),request={method:"POST",url:tokenEndPointParam||tokenEndPoint,headers:{"Content-Type":"application/x-www-form-urlencoded"},data:requestUri},deferred=$q.defer();return $http(request).success(function(response){var userInfoModel=createUserInfoModel(response[".expires"],response[".issued"],response.access_token,response["as:client_id"],response.token_type,response.refresh_token,response.token_type,response.userName);setUserInfo(userInfoModel),deferred.resolve(userInfoModel),$log.info("Zeus - Login eseguito - Response: ",response),$rootScope.$broadcast("zeus-refreshtoken-success",response)}).error(function(error){deferred.reject(error),$log.error("Zeus - Login fallito - Errori: ",error),$rootScope.$broadcast("zeus-refreshtoken-error",error)}),deferred.promise},init:function(clientIdParam,tokenEndPointParam,zeusLabelParams){clientId=clientIdParam,tokenEndPoint=tokenEndPointParam,loginTrack(),claimsTrack(),zeusLabelParams&&(zeusLabels=zeusLabelParams)},deleteAuthUserInfo:deleteAuthUserInfo,loginStatus:{success:0,credentialsInvalid:1,userIsDisable:2,passwordExpired:3,userIsBanned:4,loginAttemptsExceeded:5,usernameInvalid:6,passwordInvalid:7,firstAccessDetected:8},changePasswordStatus:{success:0,fail:1,oldPasswordInvalid:2,userNotFound:3,userBanned:4,userDisabled:5},getUser:function(username,url){if(!url)throw new Error;var request={method:"GET",url:url,params:{username:username}},deferred=$q.defer();return $http(request).success(function(response){deferred.resolve(response),$log.info("Zeus - Get user eseguito - Response: ",response)}).error(function(error){deferred.reject(error),$log.info("Zeus - Get user fallito - Response: ",error)}),deferred.promise},generateStatusErrorMessage:function(errorStatus,toastr,showLogs){var labelErrorTitle=zeusLabels.error,labelErrorDescription="";switch(errorStatus){case this.loginStatus.credentialsInvalid:labelErrorDescription=zeusLabels.credentialsInvalid,toastr&&toastr.error(labelErrorDescription,labelErrorTitle);break;case this.loginStatus.firstAccessDetected:labelErrorTitle=zeusLabels.warning,labelErrorDescription=zeusLabels.firstAccessDetected,$rootScope.$broadcast("zeus-firstAccessDetected"),toastr&&toastr.warning(labelErrorDescription,labelErrorTitle);break;case this.loginStatus.loginAttemptsExceeded:labelErrorDescription=zeusLabels.loginAttemptsExceeded,toastr&&toastr.error(labelErrorDescription,labelErrorTitle);break;case this.loginStatus.passwordExpired:labelErrorDescription=zeusLabels.passwordExpired,toastr&&toastr.error(labelErrorDescription,labelErrorTitle);break;case this.loginStatus.passwordInvalid:labelErrorDescription=zeusLabels.passwordInvalid,toastr&&toastr.error(labelErrorDescription,labelErrorTitle);break;case this.loginStatus.userIsBanned:labelErrorDescription=zeusLabels.userIsBanned,toastr&&toastr.error(labelErrorDescription,labelErrorTitle);break;case this.loginStatus.userIsDisable:labelErrorDescription=zeusLabels.userIsDisable,toastr&&toastr.error(labelErrorDescription,labelErrorTitle);break;case this.loginStatus.usernameInvalid:labelErrorDescription=zeusLabels.usernameInvalid,toastr&&toastr.error(labelErrorDescription,labelErrorTitle)}!showLogs&&toastr||$log.error(labelErrorTitle+" "+labelErrorDescription)},zeusLabels:zeusLabels,setZeusLabels:function(labels){zeusLabels=labels},resetPassword:function(username,url){if(!url)throw new Error;var request={method:"POST",url:url,data:{username:username}},deferred=$q.defer();return $http(request).then(function(response){deferred.resolve(response),$log.info("Zeus - ResetPassword eseguito - Response: ",response)},function(error){deferred.reject(error),$log.info("Zeus - ResetPassword fallito - Response: ",error)}),deferred.promise},changePassword:function(url,username,oldPassword,newPassword){if(!url)throw new Error;var deferred=$q.defer();return $http({method:"POST",url:url,data:{Username:username,OldPassword:oldPassword,NewPassword:newPassword}}).success(function(response){deferred.resolve(response),$log.info("Zeus - changePassword eseguito - Response: ",response)}).error(function(error){deferred.reject(error),$log.info("Zeus - changePassword fallito - Response: ",error)}),deferred.promise},claimsTrack:claimsTrack,hasClaim:hasClaim,claimModel:function(dto){return dto?{claimType:dto.m_type||dto.ValueType||dto.type,claimValue:dto.m_value||dto.Value||dto.value}:null},getUsername:function(){var user=angular.fromJson($window.localStorage.AuthUserInfo);return user?user.username:null},loginTrack:loginTrack}}]),zeusApp.factory("zeusAuthInterceptorService",["$q","$injector","$window","$log","$rootScope",function($q,$injector,$window,$log,$rootScope){var isRefreshingToken=!1;return{request:function(config){config.headers=config.headers||{};var authData=$injector.get("zeusAuthService").getUserInfo();return authData&&!config.headers.overwriteAuthorization&&(config.headers.Authorization="Bearer "+authData.accessToken),config},responseError:function(rejection){if(401===rejection.status){$log.info("Zeus Unauthorized: "+angular.toJson(rejection)),$rootScope.$broadcast("zeus-unauthorized",rejection);var zeusAuthService=$injector.get("zeusAuthService");zeusAuthService.getUserInfo()&&!isRefreshingToken?(isRefreshingToken=!0,zeusAuthService.refreshToken().then(function(success){return $q.reject(rejection)},function(error){return zeusAuthService.logout(),$q.reject(rejection)}).finally(function(){isRefreshingToken=!1})):isRefreshingToken||($log.info("Sessione di lavoro scaduta, riesegui il login."),zeusAuthService.logout())}return $q.reject(rejection)}}}]);