describe("Service: $cordovaPush",function(){var $cordovaPush,$rootScope;beforeEach(module("ngCordova.plugins.push")),beforeEach(inject(function(_$cordovaPush_,_$rootScope_){$cordovaPush=_$cordovaPush_,$rootScope=_$rootScope_,window.plugins={pushNotification:{register:angular.noop,unregister:angular.noop,setApplicationIconBadgeNumber:angular.noop}}})),it("should call window's pushNotification.register method",function(){var result,config={someConfig:1};spyOn(window.plugins.pushNotification,"register").and.callFake(function(successCb,errorCb,config){successCb(!0)}),$cordovaPush.register(config).then(function(response){result=response}),$rootScope.$digest(),expect(result).toBe(!0),expect(window.plugins.pushNotification.register.calls.argsFor(0)[2]).toBe(config)}),it("should call errorCb when in window's pushNotification.register a error orccurs",function(){var result,errorObj={someError:1};spyOn(window.plugins.pushNotification,"register").and.callFake(function(successCb,errorCb,config){errorCb(errorObj)}),$cordovaPush.register().then(angular.noop,function(response){result=response}),$rootScope.$digest(),expect(result).toBe(errorObj)}),it("should call window's pushNotification.unregister method",function(){var result,options={someConfig:1};spyOn(window.plugins.pushNotification,"unregister").and.callFake(function(successCb,errorCb,options){successCb(!0)}),$cordovaPush.unregister(options).then(function(response){result=response}),$rootScope.$digest(),expect(result).toBe(!0),expect(window.plugins.pushNotification.unregister.calls.argsFor(0)[2]).toBe(options)}),it("should call errorCb when in window's pushNotification.unregister a error orccurs",function(){var result,errorObj={someError:1};spyOn(window.plugins.pushNotification,"unregister").and.callFake(function(successCb,errorCb,options){errorCb(errorObj)}),$cordovaPush.unregister().then(angular.noop,function(response){result=response}),$rootScope.$digest(),expect(result).toBe(errorObj)}),it("should call window's pushNotification.setApplicationIconBadgeNumber method",function(){var result;spyOn(window.plugins.pushNotification,"setApplicationIconBadgeNumber").and.callFake(function(successCb,errorCb,number){successCb(!0)}),$cordovaPush.setBadgeNumber(7).then(function(response){result=response}),$rootScope.$digest(),expect(result).toBe(!0),expect(window.plugins.pushNotification.setApplicationIconBadgeNumber.calls.argsFor(0)[2]).toBe(7)}),it("should call errorCb when in window's pushNotification.setApplicationIconBadgeNumber a error orccurs",function(){var result,errorObj={someError:1};spyOn(window.plugins.pushNotification,"setApplicationIconBadgeNumber").and.callFake(function(successCb,errorCb,number){errorCb(errorObj)}),$cordovaPush.setBadgeNumber().then(angular.noop,function(response){result=response}),$rootScope.$digest(),expect(result).toBe(errorObj)})});