describe("Service: $cordovaSQLite",function(){var $cordovaSQLite,$rootScope;beforeEach(module("ngCordova.plugins.sqlite")),beforeEach(inject(function(_$cordovaSQLite_,_$rootScope_){$cordovaSQLite=_$cordovaSQLite_,$rootScope=_$rootScope_,window.sqlitePlugin={openDatabase:angular.noop,deleteDatabase:angular.noop}})),it("should call window's sqlitePlugin.open method without background",function(){spyOn(window.sqlitePlugin,"openDatabase"),$cordovaSQLite.openDB("someDbName"),expect(window.sqlitePlugin.openDatabase).toHaveBeenCalledWith({name:"someDbName",bgType:void 0})}),it("should call window's sqlitePlugin.open method with background",function(){spyOn(window.sqlitePlugin,"openDatabase"),$cordovaSQLite.openDB("someDbName",2),expect(window.sqlitePlugin.openDatabase).toHaveBeenCalledWith({name:"someDbName",bgType:2})}),it("should call window's sqlitePlugin.open method with options",function(){spyOn(window.sqlitePlugin,"openDatabase"),$cordovaSQLite.openDB({name:"someDbName",createFromLocation:1}),expect(window.sqlitePlugin.openDatabase).toHaveBeenCalledWith({name:"someDbName",createFromLocation:1})}),it("should call window's sqlitePlugin.deleteDB method",function(){var result;spyOn(window.sqlitePlugin,"deleteDatabase").and.callFake(function(dbName,successCb,errorCb){successCb(!0)}),$cordovaSQLite.deleteDB("someDbName").then(function(response){result=response}),$rootScope.$digest(),expect(result).toBe(!0)}),it("should call errorCb when in window's sqlitePlugin.deleteDatabase a error orccurs",function(){var result,errorObj={someError:1};spyOn(window.sqlitePlugin,"deleteDatabase").and.callFake(function(dbName,successCb,errorCb){errorCb(errorObj)}),$cordovaSQLite.deleteDB("someDbName").then(angular.noop,function(response){result=response}),$rootScope.$digest(),expect(result).toBe(errorObj)})});