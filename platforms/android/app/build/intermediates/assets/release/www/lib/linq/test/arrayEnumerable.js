var module=QUnit.module,Enumerable=require("../linq.min");require("../extensions/linq.qunit.js")({Enumerable:Enumerable}),module("ArrayEnumerable");var arraySequence=Enumerable.from([1,10,100,1e3,1e4]),emptySequence=Enumerable.from([]);test("any",function(){ok(arraySequence.any()),ok(!emptySequence.any()),ok(arraySequence.any("$==100")),ok(!emptySequence.any("$==2"))}),test("count",function(){equal(arraySequence.count(),5),equal(emptySequence.count(),0),equal(arraySequence.count("$<=100"),3),equal(emptySequence.count("$<=100"),0)}),test("elementAt",function(){equal(arraySequence.elementAt(3),1e3);try{arraySequence.elementAt(-1),ok(!1)}catch(e){ok(!0,"okay")}try{arraySequence.elementAt(100),ok(!1)}catch(e){ok(!0)}}),test("elementAtOrDefault",function(){equal(arraySequence.elementAtOrDefault(4),1e4),equal(arraySequence.elementAtOrDefault(-1,-100),-100),equal(arraySequence.elementAtOrDefault(5,-100),-100)}),test("first",function(){equal(arraySequence.first(),1),equal(arraySequence.first("$>=100"),100);try{arraySequence.first("$==-1"),ok(!1)}catch(e){ok(!0)}try{emptySequence.first(),ok(!1)}catch(e){ok(!0)}}),test("firstOrDefault",function(){strictEqual(arraySequence.firstOrDefault(),1),strictEqual(emptySequence.firstOrDefault(),void 0),strictEqual(arraySequence.firstOrDefault(0),1),strictEqual(emptySequence.firstOrDefault(0),0),strictEqual(emptySequence.firstOrDefault(void 0),void 0),strictEqual(arraySequence.firstOrDefault(null,0),1),strictEqual(emptySequence.firstOrDefault(null),void 0),strictEqual(emptySequence.firstOrDefault(null,0),0),strictEqual(emptySequence.firstOrDefault(null,null),null),strictEqual(emptySequence.firstOrDefault(null,void 0),void 0),strictEqual(arraySequence.firstOrDefault("i=>true"),1),strictEqual(emptySequence.firstOrDefault("i=>true"),void 0),strictEqual(arraySequence.firstOrDefault("i=>true",0),1),strictEqual(emptySequence.firstOrDefault("i=>true",0),0),strictEqual(emptySequence.firstOrDefault("i=>true",null),null),strictEqual(emptySequence.firstOrDefault("i=>true",void 0),void 0)}),test("last",function(){equal(arraySequence.last(),1e4),equal(arraySequence.last("$<=500"),100);try{arraySequence.last("$==-1"),ok(!1)}catch(e){ok(!0)}try{emptySequence.last(),ok(!1)}catch(e){ok(!0)}}),test("lastOrDefault",function(){strictEqual(arraySequence.lastOrDefault(),1e4),strictEqual(emptySequence.lastOrDefault(),void 0),strictEqual(arraySequence.lastOrDefault(0),1e4),strictEqual(emptySequence.lastOrDefault(0),0),strictEqual(emptySequence.lastOrDefault(void 0),void 0),strictEqual(arraySequence.lastOrDefault(null,0),1e4),strictEqual(emptySequence.lastOrDefault(null),void 0),strictEqual(emptySequence.lastOrDefault(null,0),0),strictEqual(emptySequence.lastOrDefault(null,null),null),strictEqual(emptySequence.lastOrDefault(null,void 0),void 0),strictEqual(arraySequence.lastOrDefault("i=>true"),1e4),strictEqual(emptySequence.lastOrDefault("i=>true"),void 0),strictEqual(arraySequence.lastOrDefault("i=>true",0),1e4),strictEqual(emptySequence.lastOrDefault("i=>true",0),0),strictEqual(emptySequence.lastOrDefault("i=>true",null),null),strictEqual(emptySequence.lastOrDefault("i=>true",void 0),void 0)}),test("skip",function(){deepEqual(arraySequence.skip(3).toArray(),[1e3,1e4]),deepEqual(arraySequence.skip(-10).toArray(),[1,10,100,1e3,1e4]),deepEqual(arraySequence.skip(10).toArray(),[]),deepEqual(emptySequence.skip(3).toArray(),[])}),test("takeExceptLast",function(){deepEqual(arraySequence.takeExceptLast().toArray(),[1,10,100,1e3]),deepEqual(arraySequence.takeExceptLast(3).toArray(),[1,10]),deepEqual(arraySequence.takeExceptLast(-100).toArray(),[1,10,100,1e3,1e4]),deepEqual(arraySequence.takeExceptLast(0).toArray(),[1,10,100,1e3,1e4]),deepEqual(arraySequence.takeExceptLast(100).toArray(),[])}),test("takeFromLast",function(){deepEqual(arraySequence.takeFromLast(3).toArray(),[100,1e3,1e4]),deepEqual(arraySequence.takeFromLast(0).toArray(),[]),deepEqual(arraySequence.takeFromLast(-100).toArray(),[]),deepEqual(arraySequence.takeFromLast(100).toArray(),[1,10,100,1e3,1e4])}),test("reverse",function(){deepEqual(arraySequence.reverse().toArray(),[1e4,1e3,100,10,1]),deepEqual(emptySequence.reverse().toArray(),[])}),test("sequenceEqual",function(){ok(arraySequence.sequenceEqual([1,10,100,1e3,1e4])),ok(!arraySequence.sequenceEqual([1,10,100,1e3,1e4,1e5])),ok(!arraySequence.sequenceEqual([1,10,100,1e3])),ok(!arraySequence.sequenceEqual([1,10,500,1e3,1e4]))}),test("toJoinedString",function(){equal(arraySequence.toJoinedString(),"110100100010000"),equal(arraySequence.toJoinedString("-"),"1-10-100-1000-10000"),equal(arraySequence.toJoinedString("-","$+1"),"2-11-101-1001-10001")});