ngCordovaMocks.factory("$cordovaContacts",["$q",function($q){return{throwsError:!1,contacts:[],save:function(contact){var defer=$q.defer();if(this.throwsError)defer.reject("There was an error saving the contact.");else{for(var existingIndex=null,i=0;i<this.contacts.length;i++)if(this.contacts[i].id===contact.id){existingIndex=i;break}null===existingIndex?(this.contacts.push(contact),defer.resolve()):defer.reject("Contact already exists.")}return defer.promise},remove:function(contact){var defer=$q.defer();if(this.throwsError)defer.reject("There was an error saving the contact.");else{for(var toRemove=null,i=0;i<this.contacts.length;i++)if(this.contacts[i].id===contact.id){toRemove=i;break}null===toRemove?defer.reject("Unable to find contact."):(this.contacts.splice(toRemove,1),defer.resolve())}return defer.promise},find:function(options){var defer=$q.defer();if(this.throwsError)defer.reject("There was an error finding the contact.");else{var fields=options.fields||["id","displayName"];if(delete options.fields,fields)if("*"===fields)defer.resolve(this.contacts);else{for(var i=0;i<this.contacts.length;i++)for(var key in this.contacts[i])this.contacts[i][key];defer.resolve([])}else defer.reject("ContactError.INVALID_ARGUMENT_ERROR")}return defer.promise}}}]);