ngCordovaMocks.factory("$cordovaFile",["$q",function($q){var files={},mockIt=function(errorMessage){var defer=$q.defer();return this.throwsError?defer.reject(errorMessage):defer.resolve(),defer.promise};return{throwsError:!1,fileSystem:{},shouldMockFiles:!1,files:files,checkDir:function(directory){if(this.shouldMockFiles){var defer=$q.defer();return this.files[directory]&&!this.files[directory].isFile?defer.resolve():defer.reject(),defer.promise}return mockIt.call(this,"There was an error checking the directory.")},createDir:function(directory,overwrite){if(this.shouldMockFiles){var defer=$q.defer();return this.files[directory]={isFile:!1},defer.resolve(),defer.promise}return mockIt.call(this,"There was an error creating the directory.")},listDir:function(filePath){return mockIt.call(this,"There was an error listing the directory")},checkFile:function(filePath){if(this.shouldMockFiles){var defer=$q.defer();return this.files[filePath]&&this.files[filePath].isFile?defer.resolve():defer.reject(),defer.promise}return mockIt.call(this,"There was an error checking for the file.")},createFile:function(filePath,overwrite){if(this.shouldMockFiles){var defer=$q.defer();return this.files[filePath]={isFile:!0,fileContent:""},defer.resolve(),defer.promise}return mockIt.call(this,"There was an error creating the file.")},removeFile:function(directory,file){return mockIt.call(this,"There was an error removng the file.")},writeFile:function(filePath,data,options){return this.shouldMockFiles&&filePath&&data&&(this.files[filePath]={isFile:!0,fileContent:data}),mockIt.call(this,"There was an error writing the file.")},readFile:function(filePath){return this.readAsText(filePath)},readAsText:function(filePath){if(this.shouldMockFiles){var defer=$q.defer();return files[filePath]&&files[filePath].isFile?defer.resolve(files[filePath].fileContent):defer.reject(),defer.promise}return mockIt.call(this,"There was an error reading the file as text.")},readAsDataURL:function(filePath){return mockIt.call(this,"There was an error reading the file as a data url.")},readAsBinaryString:function(filePath){return mockIt.call(this,"There was an error reading the file as a binary string.")},readAsArrayBuffer:function(filePath){return mockIt.call(this,"There was an error reading the file as an array buffer.")},readFileMetadata:function(filePath){return mockIt.call(this,"There was an error reading the file metadata")},readFileAbsolute:function(filePath){return mockIt.call(this,"There was an error reading the file from the absolute path")},readFileMetadataAbsolute:function(filePath){return mockIt.call(this,"There was an error reading the file metadta from the absolute path")}}}]);